
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-type" content="text/html; charset=UTF-8"/>
<title>Vim: filetype.txt</title>
<link rel="shortcut icon" href="favicon.ico">
<!-- favicon is based on http://amnoid.de/tmp/vim_solidbright_512.png and is used with permission by its author -->
<!--[if IE]>
<link rel="stylesheet" href="vimhelp-ie.css" type="text/css">
<![endif]-->
<!--[if !IE]>-->
<link rel="stylesheet" href="vimhelp.css" type="text/css">
<!--<![endif]-->

<script>
  (function() {
    var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.co.uk/cse/cse.js?cx=007529716539815883269:a71bug8rd0k';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s);
  })();
</script>
</head><body><table width="100%"><tbody><tr><td>
Quick links:
<a href="/">help overview</a> &middot;
<a href="quickref.txt.html">quick reference</a> &middot;
<a href="usr_toc.txt.html">user manual toc</a> &middot;
<a href="help.txt.html#reference_toc">reference manual toc</a> &middot;
<a href="vim_faq.txt.html">faq</a>
</td><td align="right"><div class="gcse-searchbox"></div></td></tr></tbody></table><div class="gcse-searchresults"></div>
<div id="d1">
<pre id="sp">                                                                                </pre>
<div id="d2">
<pre>
<a name="filetype.txt" class="t">filetype.txt</a>  For <span class="i">Vim version 7.4.</span>  Last change: 2013 Dec 15


                  <span class="i">VIM REFERENCE MANUAL    by Bram Moolenaar</span>


Filetypes                                               <a name="filetype" class="t">filetype</a> <a name="file-type" class="t">file-type</a>

1. Filetypes                                    <a href="filetype.txt.html#filetypes" class="l">filetypes</a>
2. Filetype <a href="usr_05.txt.html#plugin" class="d">plugin</a>                              <a href="filetype.txt.html#filetype-plugins" class="l">filetype-plugins</a>
3. Docs for the default <a href="filetype.txt.html#filetype" class="d">filetype</a> plugins.       <a href="filetype.txt.html#ftplugin-docs" class="l">ftplugin-docs</a>

Also see <a href="autocmd.txt.html#autocmd.txt" class="l">autocmd.txt</a><a href="repeat.txt.html#." class="d">.</a>

<span class="s">{Vi does not have any of these commands}</span>

<span class="h">==============================================================================</span>
1. Filetypes                                    <a name="filetypes" class="t">filetypes</a> <a name="file-types" class="t">file-types</a>

Vim can detect the type of file that <a href="motion.txt.html#is" class="d">is</a> edited.  This <a href="motion.txt.html#is" class="d">is</a> done by checking the
file name and sometimes by inspecting the contents of the file for specific
text.

                                                        <a name="%3Afiletype" class="t">:filetype</a> <a name="%3Afilet" class="t">:filet</a>
To enable file type detection, use this command in your vimrc: 
<span class="e">        :filetype on</span>
Each time <a href="insert.txt.html#a" class="d">a</a> new or existing file <a href="motion.txt.html#is" class="d">is</a> edited, Vim will try to recognize the type
of the file and set the <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> option.  This will trigger the <a href="autocmd.txt.html#FileType" class="d">FileType</a>
event, which can be used to set the <a href="syntax.txt.html#syntax" class="d">syntax</a> highlighting, set options, etc.

<span class="n">NOTE:</span> Filetypes and <a href="options.txt.html#%27compatible%27" class="o">'compatible'</a> don't work together well, since being <a href="intro.txt.html#Vi" class="d">Vi</a>
compatible means <a href="options.txt.html#options" class="d">options</a> are global.  Resetting <a href="options.txt.html#%27compatible%27" class="o">'compatible'</a> <a href="motion.txt.html#is" class="d">is</a> recommended,
if you didn't <a href="diff.txt.html#do" class="d">do</a> that already.

Detail: The "<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> on" command will load one of these files:
                <a href="os_amiga.txt.html#Amiga" class="d">Amiga</a>       $VIMRUNTIME/filetype.vim
                <a href="os_mac.txt.html#Mac" class="d">Mac</a>         $VIMRUNTIME:filetype.vim
                <a href="os_msdos.txt.html#MS-DOS" class="d">MS-DOS</a>      $VIMRUNTIME\filetype.vim
                RiscOS      Vim:Filetype
                <a href="os_unix.txt.html#Unix" class="d">Unix</a>        $VIMRUNTIME/filetype.vim
                <a href="os_vms.txt.html#VMS" class="d">VMS</a>         $VIMRUNTIME/filetype.vim
        This file <a href="motion.txt.html#is" class="d">is</a> <a href="insert.txt.html#a" class="d">a</a> Vim <a href="usr_41.txt.html#script" class="d">script</a> that defines autocommands for the
        <a href="autocmd.txt.html#BufNewFile" class="d">BufNewFile</a> and <a href="autocmd.txt.html#BufRead" class="d">BufRead</a> events.  If the file type <a href="motion.txt.html#is" class="d">is</a> not found by the
        name, the file $VIMRUNTIME/scripts.vim <a href="motion.txt.html#is" class="d">is</a> used to detect <a href="motion.txt.html#it" class="d">it</a> from the
        contents of the file.
        When the <a href="gui.txt.html#GUI" class="d">GUI</a> <a href="motion.txt.html#is" class="d">is</a> running or will start soon, the <a href="gui.txt.html#menu.vim" class="d">menu.vim</a> <a href="usr_41.txt.html#script" class="d">script</a> <a href="motion.txt.html#is" class="d">is</a>
        also sourced.  See <a href="options.txt.html#%27go-M%27" class="l">'go-M'</a> about avoiding that.

To add your own file types, see <a href="filetype.txt.html#new-filetype" class="l">new-filetype</a> below.  To search for <a href="helphelp.txt.html#help" class="d">help</a> on <a href="insert.txt.html#a" class="d">a</a>
<a href="filetype.txt.html#filetype" class="d">filetype</a> prepend "ft-" and optionally append "-syntax"<a href="motion.txt.html#%2C" class="d">,</a> "-indent" or
"-plugin"<a href="repeat.txt.html#." class="d">.</a>  For example: 
<span class="e">        :help ft-vim-indent</span>
<span class="e">        :help ft-vim-syntax</span>
<span class="e">        :help ft-man-plugin</span>
<span class="e"></span>
If the file type <a href="motion.txt.html#is" class="d">is</a> not detected automatically, or <a href="motion.txt.html#it" class="d">it</a> finds the wrong type,
you can either set the <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> option manually, or add <a href="insert.txt.html#a" class="d">a</a> <a href="options.txt.html#modeline" class="d">modeline</a> to your
file.  Example, for an IDL file use the command: 
<span class="e">        :set filetype=idl</span>
<span class="e"></span>
or add this <a href="options.txt.html#modeline" class="l">modeline</a> to the file:
<span class="h">        /* vim: set filetype=idl : */ </span>

                                                <a name="%3Afiletype-plugin-on" class="t">:filetype-plugin-on</a>
You can enable loading the <a href="usr_05.txt.html#plugin" class="d">plugin</a> files for specific file types with: 
<span class="e">        :filetype plugin on</span>
If <a href="filetype.txt.html#filetype" class="d">filetype</a> detection was not switched on yet, <a href="motion.txt.html#it" class="d">it</a> will be <a href="motion.txt.html#as" class="d">as</a> well.
This actually loads the file "ftplugin.vim" in <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.
The result <a href="motion.txt.html#is" class="d">is</a> that when <a href="insert.txt.html#a" class="d">a</a> file <a href="motion.txt.html#is" class="d">is</a> edited its <a href="usr_05.txt.html#plugin" class="d">plugin</a> file <a href="motion.txt.html#is" class="d">is</a> loaded (if there
<a href="motion.txt.html#is" class="d">is</a> one for the detected filetype). <a href="usr_43.txt.html#filetype-plugin" class="l">filetype-plugin</a>

                                                <a name="%3Afiletype-plugin-off" class="t">:filetype-plugin-off</a>
You can disable <a href="motion.txt.html#it" class="d">it</a> again with: 
<span class="e">        :filetype plugin off</span>
The <a href="filetype.txt.html#filetype" class="d">filetype</a> detection <a href="motion.txt.html#is" class="d">is</a> not switched off then.  But if you <a href="diff.txt.html#do" class="d">do</a> switch off
<a href="filetype.txt.html#filetype" class="d">filetype</a> detection, the plugins will not be loaded either.
This actually loads the file "ftplugof.vim" in <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.

                                                <a name="%3Afiletype-indent-on" class="t">:filetype-indent-on</a>
You can enable loading the indent file for specific file types with: 
<span class="e">        :filetype indent on</span>
If <a href="filetype.txt.html#filetype" class="d">filetype</a> detection was not switched on yet, <a href="motion.txt.html#it" class="d">it</a> will be <a href="motion.txt.html#as" class="d">as</a> well.
This actually loads the file "indent.vim" in <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.
The result <a href="motion.txt.html#is" class="d">is</a> that when <a href="insert.txt.html#a" class="d">a</a> file <a href="motion.txt.html#is" class="d">is</a> edited its indent file <a href="motion.txt.html#is" class="d">is</a> loaded (if there
<a href="motion.txt.html#is" class="d">is</a> one for the detected filetype). <a href="indent.txt.html#indent-expression" class="l">indent-expression</a>

                                                <a name="%3Afiletype-indent-off" class="t">:filetype-indent-off</a>
You can disable <a href="motion.txt.html#it" class="d">it</a> again with: 
<span class="e">        :filetype indent off</span>
The <a href="filetype.txt.html#filetype" class="d">filetype</a> detection <a href="motion.txt.html#is" class="d">is</a> not switched off then.  But if you <a href="diff.txt.html#do" class="d">do</a> switch off
<a href="filetype.txt.html#filetype" class="d">filetype</a> detection, the indent files will not be loaded either.
This actually loads the file "indoff.vim" in <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.
This disables auto-indenting for files you will open.  It will keep working in
already opened files.  Reset <a href="options.txt.html#%27autoindent%27" class="o">'autoindent'</a>, <a href="options.txt.html#%27cindent%27" class="o">'cindent'</a>, <a href="options.txt.html#%27smartindent%27" class="o">'smartindent'</a> and/or
<a href="options.txt.html#%27indentexpr%27" class="o">'indentexpr'</a> to disable indenting in an opened file.

                                                <a name="%3Afiletype-off" class="t">:filetype-off</a>
To disable file type detection, use this command: 
<span class="e">        :filetype off</span>
This will keep the flags for "<a href="usr_05.txt.html#plugin" class="d">plugin</a>" and "indent"<a href="motion.txt.html#%2C" class="d">,</a> but since no file types
are being detected, they won't work until the next "<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> on"<a href="repeat.txt.html#." class="d">.</a>


Overview:                                       <a name="%3Afiletype-overview" class="t">:filetype-overview</a>

<span class="h">command                         detection       plugin          indent </span>
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> on                    on              unchanged       unchanged
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> off                   off             unchanged       unchanged
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> on             on              on              unchanged
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> off            unchanged       off             unchanged
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> indent on             on              unchanged       on
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> indent off            unchanged       unchanged       off
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> indent on      on              on              on
<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> indent off     unchanged       off             off

To see the current status, type: 
<span class="e">        :filetype</span>
The output looks something like this: 
<span class="e">        filetype detection:ON  plugin:ON  indent:OFF</span>
<span class="e"></span>
The file types are also used for <a href="syntax.txt.html#syntax" class="d">syntax</a> highlighting.  If the "<a href="syntax.txt.html#%3Asyntax" class="d">:syntax</a> on"
command <a href="motion.txt.html#is" class="d">is</a> used, the file type detection <a href="motion.txt.html#is" class="d">is</a> installed too.  There <a href="motion.txt.html#is" class="d">is</a> no need
to <a href="diff.txt.html#do" class="d">do</a> "<a href="filetype.txt.html#%3Afiletype" class="d">:filetype</a> on" after "<a href="syntax.txt.html#%3Asyntax" class="d">:syntax</a> on"<a href="repeat.txt.html#." class="d">.</a>

To disable one of the file types, add <a href="insert.txt.html#a" class="d">a</a> line in your <a href="filetype.txt.html#filetype" class="d">filetype</a> file, see
<a href="filetype.txt.html#remove-filetype" class="l">remove-filetype</a><a href="repeat.txt.html#." class="d">.</a>

                                                        <a name="filetype-detect" class="t">filetype-detect</a>
To detect the file type again: 
<span class="e">        :filetype detect</span>
Use this if you started with an empty file and typed text that makes <a href="motion.txt.html#it" class="d">it</a>
possible to detect the file type.  For example, when you entered this in <a href="insert.txt.html#a" class="d">a</a>
shell script: "#!/bin/csh"<a href="repeat.txt.html#." class="d">.</a>
   When <a href="filetype.txt.html#filetype" class="d">filetype</a> detection was off, <a href="motion.txt.html#it" class="d">it</a> will be enabled first, like the "on"
argument was used.

                                                        <a name="filetype-overrule" class="t">filetype-overrule</a>
When the same extension <a href="motion.txt.html#is" class="d">is</a> used for two filetypes, Vim tries to guess what
kind of file <a href="motion.txt.html#it" class="d">it</a> is.  This doesn't always work.  <a href="insert.txt.html#A" class="d">A</a> number of global <a href="eval.txt.html#variables" class="d">variables</a>
can be used to overrule the <a href="filetype.txt.html#filetype" class="d">filetype</a> used for certain extensions:

<span class="h">        file name       variable </span>
        *.asa           g:filetype_asa  <a href="syntax.txt.html#ft-aspvbs-syntax" class="l">ft-aspvbs-syntax</a> <a href="syntax.txt.html#ft-aspperl-syntax" class="l">ft-aspperl-syntax</a>
        *.asp           g:filetype_asp  <a href="syntax.txt.html#ft-aspvbs-syntax" class="l">ft-aspvbs-syntax</a> <a href="syntax.txt.html#ft-aspperl-syntax" class="l">ft-aspperl-syntax</a>
        *.asm           g:asmsyntax     <a href="syntax.txt.html#ft-asm-syntax" class="l">ft-asm-syntax</a>
        *.prg           g:filetype_prg
        *.pl            g:filetype_pl
        *.inc           g:filetype_inc
        *.w             g:filetype_w    <a href="syntax.txt.html#ft-cweb-syntax" class="l">ft-cweb-syntax</a>
        *.i             g:filetype_i    <a href="syntax.txt.html#ft-progress-syntax" class="l">ft-progress-syntax</a>
        *.p             g:filetype_p    <a href="syntax.txt.html#ft-pascal-syntax" class="l">ft-pascal-syntax</a>
        *.sh            g:bash_is_sh    <a href="syntax.txt.html#ft-sh-syntax" class="l">ft-sh-syntax</a>
        *.tex           <a href="filetype.txt.html#g%3Atex_flavor" class="d">g:tex_flavor</a>    <a href="filetype.txt.html#ft-tex-plugin" class="l">ft-tex-plugin</a>

                                                        <a name="filetype-ignore" class="t">filetype-ignore</a>
To avoid that certain files are being inspected, the g:ft_ignore_pat variable
<a href="motion.txt.html#is" class="d">is</a> used.  The default value <a href="motion.txt.html#is" class="d">is</a> set like this: 
<span class="e">        :let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'</span>
This means that the contents of compressed files are not inspected.

                                                        <a name="new-filetype" class="t">new-filetype</a>
If <a href="insert.txt.html#a" class="d">a</a> file type that you want to use <a href="motion.txt.html#is" class="d">is</a> not detected yet, there are four ways
to add it.  In any way, it's better not to modify the $VIMRUNTIME/filetype.vim
file.  It will be overwritten when installing <a href="insert.txt.html#a" class="d">a</a> new version of Vim.

A. If you want to overrule all default file type checks.
   This works by <a href="editing.txt.html#writing" class="d">writing</a> one file for each filetype.  The disadvantage <a href="motion.txt.html#is" class="d">is</a> that
   means there can be many files.  The advantage <a href="motion.txt.html#is" class="d">is</a> that you can simply drop
   this file in the right directory to make <a href="motion.txt.html#it" class="d">it</a> work.
                                                        <a name="ftdetect" class="t">ftdetect</a>
   1. Create your user runtime directory.  You would normally use the first
      item of the <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a> option.  Then create the directory "<a href="filetype.txt.html#ftdetect" class="d">ftdetect</a>"
      inside it.  Example for Unix: 
<span class="e">        :!mkdir ~/.vim</span>
<span class="e">        :!mkdir ~/.vim/ftdetect</span>

   2. Create <a href="insert.txt.html#a" class="d">a</a> file that contains an <a href="autocmd.txt.html#autocommand" class="d">autocommand</a> to detect the file type.
      Example: 
<span class="e">        au BufRead,BufNewFile *.mine            set filetype=mine</span>
     <span class="n">Note</span> that there <a href="motion.txt.html#is" class="d">is</a> no "augroup" command, this has already been done
      when sourcing your file.  You could also use the <a href="pattern.txt.html#pattern" class="d">pattern</a> "*" and then
      check the contents of the file to recognize it.
      Write this file <a href="motion.txt.html#as" class="d">as</a> "mine.vim" in the "<a href="filetype.txt.html#ftdetect" class="d">ftdetect</a>" directory in your user
      runtime directory.  For example, for Unix: 
<span class="e">        :w ~/.vim/ftdetect/mine.vim</span>
<span class="e"></span>
  3. To use the new <a href="filetype.txt.html#filetype" class="d">filetype</a> detection you must restart Vim.

   The files in the "<a href="filetype.txt.html#ftdetect" class="d">ftdetect</a>" directory are used after all the default
   checks, thus they can overrule <a href="insert.txt.html#a" class="d">a</a> previously detected file type.  But you
   can also use <a href="options.txt.html#%3Asetfiletype" class="l">:setfiletype</a> to keep <a href="insert.txt.html#a" class="d">a</a> previously detected filetype.

B. If you want to detect your file after the default file type checks.

   This works like <a href="insert.txt.html#A" class="d">A</a> above, but instead of setting <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> unconditionally
   use "<a href="options.txt.html#%3Asetfiletype" class="d">:setfiletype</a>"<a href="repeat.txt.html#." class="d">.</a>  This will only set <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> if no file type was
   detected yet.  Example: 
<span class="e">        au BufRead,BufNewFile *.txt             setfiletype text</span>

   You can also use the already detected file type in your command.  For
   example, to use the file type "mypascal" when "pascal" has been detected: 
<span class="e">        au BufRead,BufNewFile *         if &amp;ft == 'pascal' | set ft=mypascal</span>
<span class="e">                                                                       | endif</span>
<span class="e"></span>
C. If your file type can be detected by the file name.
   1. Create your user runtime directory.  You would normally use the first
      item of the <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a> option.  Example for Unix: 
<span class="e">        :!mkdir ~/.vim</span>

   2. Create <a href="insert.txt.html#a" class="d">a</a> file that contains autocommands to detect the file type.
      Example: 
<span class="e">        " my filetype file</span>
<span class="e">        if exists("did_load_filetypes")</span>
<span class="e">          finish</span>
<span class="e">        endif</span>
<span class="e">        augroup filetypedetect</span>
<span class="e">          au! BufRead,BufNewFile *.mine         setfiletype mine</span>
<span class="e">          au! BufRead,BufNewFile *.xyz          setfiletype drawing</span>
<span class="e">        augroup END</span>
     Write this file <a href="motion.txt.html#as" class="d">as</a> "filetype.vim" in your user runtime directory.  For
      example, for Unix: 
<span class="e">        :w ~/.vim/filetype.vim</span>
<span class="e"></span>
  3. To use the new <a href="filetype.txt.html#filetype" class="d">filetype</a> detection you must restart Vim.

   Your filetype.vim will be sourced before the default <a href="autocmd.txt.html#FileType" class="d">FileType</a> autocommands
   have been installed.  Your autocommands will match first, and the
   "<a href="options.txt.html#%3Asetfiletype" class="d">:setfiletype</a>" command will make sure that no other autocommands will set
   <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> after this.
                                                        <a name="new-filetype-scripts" class="t">new-filetype-scripts</a>
D. If your <a href="filetype.txt.html#filetype" class="d">filetype</a> can only be detected by inspecting the contents of the
   file.

   1. Create your user runtime directory.  You would normally use the first
      item of the <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a> option.  Example for Unix: 
<span class="e">        :!mkdir ~/.vim</span>

   2. Create <a href="insert.txt.html#a" class="d">a</a> vim <a href="usr_41.txt.html#script" class="d">script</a> file for doing this.  Example: 
<span class="e">        if did_filetype()       " filetype already set..</span>
<span class="e">          finish                " ..don't do these checks</span>
<span class="e">        endif</span>
<span class="e">        if getline(1) =~ '^#!.*\&lt;mine\&gt;'</span>
<span class="e">          setfiletype mine</span>
<span class="e">        elseif getline(1) =~? '\&lt;drawing\&gt;'</span>
<span class="e">          setfiletype drawing</span>
<span class="e">        endif</span>
     See $VIMRUNTIME/scripts.vim for more examples.
      Write this file <a href="motion.txt.html#as" class="d">as</a> "scripts.vim" in your user runtime directory.  For
      example, for Unix: 
<span class="e">        :w ~/.vim/scripts.vim</span>

   3. The detection will work right away, no need to restart Vim.

   Your scripts.vim <a href="motion.txt.html#is" class="d">is</a> loaded before the default checks for file types, which
   means that your rules override the default rules in
   $VIMRUNTIME/scripts.vim.

                                                <a name="remove-filetype" class="t">remove-filetype</a>
If <a href="insert.txt.html#a" class="d">a</a> file type <a href="motion.txt.html#is" class="d">is</a> detected that <a href="motion.txt.html#is" class="d">is</a> wrong for you, <a href="usr_90.txt.html#install" class="d">install</a> <a href="insert.txt.html#a" class="d">a</a> filetype.vim or
scripts.vim to catch <a href="motion.txt.html#it" class="d">it</a> (see above).  You can set <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> to <a href="insert.txt.html#a" class="d">a</a> non-existing
name to avoid that <a href="motion.txt.html#it" class="d">it</a> will be set later anyway: 
<span class="e">        :set filetype=ignored</span>
<span class="e"></span>
If you are setting up <a href="insert.txt.html#a" class="d">a</a> system with many users, and you don't want each user
to add/remove the same filetypes, consider <a href="editing.txt.html#writing" class="d">writing</a> the filetype.vim and
scripts.vim files in <a href="insert.txt.html#a" class="d">a</a> runtime directory that <a href="motion.txt.html#is" class="d">is</a> used for everybody.  Check
the <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a> for <a href="insert.txt.html#a" class="d">a</a> directory to use.  If there isn't one, set
<a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a> in the <a href="starting.txt.html#system-vimrc" class="l">system-vimrc</a><a href="repeat.txt.html#." class="d">.</a>  Be careful to keep the default
directories!


                                                <a name="autocmd-osfiletypes" class="t">autocmd-osfiletypes</a>
<span class="n">NOTE:</span> this code <a href="motion.txt.html#is" class="d">is</a> currently disabled, <a href="motion.txt.html#as" class="d">as</a> the RISC OS implementation was
removed.  In the future this will use the <a href="options.txt.html#%27filetype%27" class="o">'filetype'</a> option.

On operating systems which support storing <a href="insert.txt.html#a" class="d">a</a> file type with the file, you can
specify that an <a href="autocmd.txt.html#autocommand" class="d">autocommand</a> should only be executed if the file <a href="motion.txt.html#is" class="d">is</a> of <a href="insert.txt.html#a" class="d">a</a>
certain type.

The actual type checking depends on which platform you are running Vim
on; see your system's documentation for details.

To use osfiletype checking in an <a href="autocmd.txt.html#autocommand" class="d">autocommand</a> you should <a href="change.txt.html#put" class="d">put</a> <a href="insert.txt.html#a" class="d">a</a> <a href="eval.txt.html#list" class="d">list</a> of types to
match in angle brackets in place of <a href="insert.txt.html#a" class="d">a</a> pattern, like this: 
<span class="e"></span>
<span class="e">        :au BufRead *.html,&lt;&amp;faf;HTML&gt;  runtime! syntax/html.vim</span>
<span class="e"></span>
This will match:

<a href="motion.txt.html#-" class="d">-</a> Any file whose name ends in ".html"
<a href="motion.txt.html#-" class="d">-</a> Any file whose type <a href="motion.txt.html#is" class="d">is</a> "&amp;faf" or "HTML"<a href="motion.txt.html#%2C" class="d">,</a> where the meaning of these types
  depends on which version of Vim you are using.
  Unknown types are considered NOT to match.

You can also specify <a href="insert.txt.html#a" class="d">a</a> type and <a href="insert.txt.html#a" class="d">a</a> <a href="pattern.txt.html#pattern" class="d">pattern</a> <a href="motion.txt.html#at" class="d">at</a> the same time (in which <a href="change.txt.html#case" class="d">case</a> they
must both match): 
<span class="e"></span>
<span class="e">        :au BufRead &lt;&amp;fff&gt;diff*</span>
<span class="e"></span>
This will match files of type "&amp;fff" whose names start with "<a href="diff.txt.html#diff" class="d">diff</a>"<a href="repeat.txt.html#." class="d">.</a>


                                                        <a name="plugin-details" class="t">plugin-details</a>
The "<a href="usr_05.txt.html#plugin" class="d">plugin</a>" directory can be in any of the directories in the <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>
option.  All of these directories will be searched for plugins and they are
all loaded.  For example, if this command: 
<span class="e"></span>
<span class="e">        set runtimepath</span>
<span class="e"></span>
produces this output:

<span class="h">        runtimepath=/etc/vim,~/.vim,/usr/local/share/vim/vim60 </span>

then Vim will load all plugins in these directories and below:

<span class="h">        /etc/vim/plugin/  </span>
<span class="h">        ~/.vim/plugin/  </span>
<span class="h">        /usr/local/share/vim/vim60/plugin/  </span>

<span class="n">Note</span> that the last one <a href="motion.txt.html#is" class="d">is</a> the value of <a href="starting.txt.html#%24VIMRUNTIME" class="d">$VIMRUNTIME</a> which has been expanded.

What if <a href="motion.txt.html#it" class="d">it</a> looks like your <a href="usr_05.txt.html#plugin" class="d">plugin</a> <a href="motion.txt.html#is" class="d">is</a> not being loaded?  You can find out what
happens when Vim starts up by using the <a href="starting.txt.html#-V" class="l">-V</a> argument: 
<span class="e"></span>
<span class="e">        vim -V2</span>
<span class="e"></span>
You will see <a href="insert.txt.html#a" class="d">a</a> lot of messages, in between them <a href="motion.txt.html#is" class="d">is</a> <a href="insert.txt.html#a" class="d">a</a> remark about loading the
plugins.  It starts with:

<span class="h">        Searching for "plugin/**/*.vim" in </span>

There you can see where Vim looks for your <a href="usr_05.txt.html#plugin" class="d">plugin</a> scripts.

<span class="h">==============================================================================</span>
2. Filetype <a href="usr_05.txt.html#plugin" class="d">plugin</a>                                      <a name="filetype-plugins" class="t">filetype-plugins</a>

When loading <a href="filetype.txt.html#filetype" class="d">filetype</a> plugins has been enabled <a href="filetype.txt.html#%3Afiletype-plugin-on" class="l">:filetype-plugin-on</a><a href="motion.txt.html#%2C" class="d">,</a> <a href="options.txt.html#options" class="d">options</a>
will be set and mappings defined.  These are all local to the buffer, they
will not be used for other files.

Defining mappings for <a href="insert.txt.html#a" class="d">a</a> <a href="filetype.txt.html#filetype" class="d">filetype</a> may get in the way of the mappings you
define yourself.  There are <a href="insert.txt.html#a" class="d">a</a> few ways to avoid this:
1. Set the "<a href="map.txt.html#maplocalleader" class="d">maplocalleader</a>" variable to the key sequence you want the mappings
   to start with.  Example: 
<span class="e">        :let maplocalleader = ","</span>
  All mappings will then start with <a href="insert.txt.html#a" class="d">a</a> comma instead of the default, which
   <a href="motion.txt.html#is" class="d">is</a> <a href="insert.txt.html#a" class="d">a</a> backslash.  Also see <a href="map.txt.html#%3CLocalLeader%3E" class="l">&lt;LocalLeader&gt;</a><a href="repeat.txt.html#." class="d">.</a>

2. Define your own mapping.  Example: 
<span class="e">        :map ,p &lt;Plug&gt;MailQuote</span>
  You need to check the description of the <a href="usr_05.txt.html#plugin" class="d">plugin</a> file below for the
   functionality <a href="motion.txt.html#it" class="d">it</a> offers and the <a href="eval.txt.html#string" class="d">string</a> to map to.
   You need to define your own <a href="map.txt.html#mapping" class="d">mapping</a> before the <a href="usr_05.txt.html#plugin" class="d">plugin</a> <a href="motion.txt.html#is" class="d">is</a> loaded (before
   editing <a href="insert.txt.html#a" class="d">a</a> file of that type).  The <a href="usr_05.txt.html#plugin" class="d">plugin</a> will then skip installing the
   default mapping.

3. Disable defining mappings for <a href="insert.txt.html#a" class="d">a</a> specific <a href="filetype.txt.html#filetype" class="d">filetype</a> by setting <a href="insert.txt.html#a" class="d">a</a> variable,
   which contains the name of the filetype.  For the "mail" <a href="filetype.txt.html#filetype" class="d">filetype</a> this
   would be: 
<span class="e">        :let no_mail_maps = 1</span>
<span class="e"></span>
4. Disable defining mappings for all <a href="filetype.txt.html#filetypes" class="d">filetypes</a> by setting <a href="insert.txt.html#a" class="d">a</a> variable: 
<span class="e">        :let no_plugin_maps = 1</span>


                                                        <a name="ftplugin-overrule" class="t">ftplugin-overrule</a>
If <a href="insert.txt.html#a" class="d">a</a> global <a href="filetype.txt.html#filetype" class="d">filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> does not <a href="diff.txt.html#do" class="d">do</a> exactly what you want, there are three
ways to change this:

1. Add <a href="insert.txt.html#a" class="d">a</a> few settings.
   You must create <a href="insert.txt.html#a" class="d">a</a> new <a href="filetype.txt.html#filetype" class="d">filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> in <a href="insert.txt.html#a" class="d">a</a> directory early in
   <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.  For Unix, for example you could use this file: 
<span class="e">        vim ~/.vim/ftplugin/fortran.vim</span>
  You can set those settings and mappings that you would like to add.  <span class="n">Note</span>
   that the global <a href="usr_05.txt.html#plugin" class="d">plugin</a> will be loaded after this, <a href="motion.txt.html#it" class="d">it</a> may overrule the
   settings that you <a href="diff.txt.html#do" class="d">do</a> here.  If this <a href="motion.txt.html#is" class="d">is</a> the case, you need to use one of the
   following two methods.

2. Make <a href="insert.txt.html#a" class="d">a</a> copy of the <a href="usr_05.txt.html#plugin" class="d">plugin</a> and change it.
   You must <a href="change.txt.html#put" class="d">put</a> the copy in <a href="insert.txt.html#a" class="d">a</a> directory early in <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.  For Unix, for
   example, you could <a href="diff.txt.html#do" class="d">do</a> this: 
<span class="e">        cp $VIMRUNTIME/ftplugin/fortran.vim ~/.vim/ftplugin/fortran.vim</span>
  Then you can edit the copied file to your liking.  Since the b:did_ftplugin
   variable will be set, the global <a href="usr_05.txt.html#plugin" class="d">plugin</a> will not be loaded.
   <a href="insert.txt.html#A" class="d">A</a> disadvantage of this method <a href="motion.txt.html#is" class="d">is</a> that when the distributed <a href="usr_05.txt.html#plugin" class="d">plugin</a> gets
   improved, you will have to copy and modify <a href="motion.txt.html#it" class="d">it</a> again.

3. Overrule the settings after loading the global plugin.
   You must create <a href="insert.txt.html#a" class="d">a</a> new <a href="filetype.txt.html#filetype" class="d">filetype</a> <a href="usr_05.txt.html#plugin" class="d">plugin</a> in <a href="insert.txt.html#a" class="d">a</a> directory from the <a href="intro.txt.html#end" class="d">end</a> of
   <a href="options.txt.html#%27runtimepath%27" class="o">'runtimepath'</a>.  For Unix, for example, you could use this file: 
<span class="e">        vim ~/.vim/after/ftplugin/fortran.vim</span>
  In this file you can change just those settings that you want to change.

<span class="h">==============================================================================</span>
3.  Docs for the default <a href="filetype.txt.html#filetype" class="d">filetype</a> plugins.              <a name="ftplugin-docs" class="t">ftplugin-docs</a>


<span class="c">CHANGELOG                                              </span> <a name="ft-changelog-plugin" class="t">ft-changelog-plugin</a>

Allows for <a href="starting.txt.html#easy" class="d">easy</a> entrance of Changelog entries in Changelog files.  There are
some commands, mappings, and <a href="eval.txt.html#variables" class="d">variables</a> worth exploring:

Options:
<a href="options.txt.html#%27comments%27" class="o">'comments'</a>              <a href="motion.txt.html#is" class="d">is</a> made empty to not mess up formatting.
<a href="options.txt.html#%27textwidth%27" class="o">'textwidth'</a>             <a href="motion.txt.html#is" class="d">is</a> set to 78, which <a href="motion.txt.html#is" class="d">is</a> standard.
<a href="options.txt.html#%27formatoptions%27" class="o">'formatoptions'</a>         the 't' flag <a href="motion.txt.html#is" class="d">is</a> added to wrap when <a href="insert.txt.html#inserting" class="d">inserting</a> text.

Commands:
NewChangelogEntry       Adds <a href="insert.txt.html#a" class="d">a</a> new Changelog entry in an intelligent fashion
                        (see below).

Local mappings:
<a href="map.txt.html#%3CLeader%3E" class="s">&lt;Leader&gt;</a>o               Starts <a href="insert.txt.html#a" class="d">a</a> new Changelog entry in an equally intelligent
                        fashion (see below).

Global mappings:
                        <span class="n">NOTE:</span> The global mappings are accessed by sourcing the
                        ftplugin/changelog.vim file first, e.g. with 
<span class="e">                                runtime ftplugin/changelog.vim</span>
                       in your <a href="starting.txt.html#.vimrc" class="l">.vimrc</a><a href="repeat.txt.html#." class="d">.</a>
<a href="map.txt.html#%3CLeader%3E" class="s">&lt;Leader&gt;</a>o               Switches to the ChangeLog buffer opened for the
                        current directory, or opens <a href="motion.txt.html#it" class="d">it</a> in <a href="insert.txt.html#a" class="d">a</a> new buffer if <a href="motion.txt.html#it" class="d">it</a>
                        exists in the current directory.  Then <a href="motion.txt.html#it" class="d">it</a> does the
                        same <a href="motion.txt.html#as" class="d">as</a> the local <a href="map.txt.html#%3CLeader%3E" class="s">&lt;Leader&gt;</a>o described above.

Variables:
g:changelog_timeformat  Deprecated; use g:changelog_dateformat instead.
g:changelog_dateformat  The date (and time) format used in ChangeLog entries.
                        The format accepted <a href="motion.txt.html#is" class="d">is</a> the same <a href="motion.txt.html#as" class="d">as</a> for the
                        <a href="eval.txt.html#strftime%28%29" class="l">strftime()</a> function.
                        The default <a href="motion.txt.html#is" class="d">is</a> "%Y-%m-%d" which <a href="motion.txt.html#is" class="d">is</a> the standard format
                        for many ChangeLog layouts.
g:changelog_username    The name and email address of the user.
                        The default <a href="motion.txt.html#is" class="d">is</a> deduced from environment <a href="eval.txt.html#variables" class="d">variables</a> and
                        system files.  It searches /etc/passwd for the comment
                        part of the current user, which informally contains
                        the real name of the user up to the first separating
                        comma.  then <a href="motion.txt.html#it" class="d">it</a> checks the $NAME environment variable
                        and finally runs <span class="e">whoami</span> and <span class="e">hostname</span> to build an
                        email address.  The final form <a href="motion.txt.html#is" class="d">is</a> 
<span class="e">                                Full Name  &lt;user@host&gt;</span>

g:changelog_new_date_format
                        The format to use when creating <a href="insert.txt.html#a" class="d">a</a> new date-entry.
                        The following table describes special tokens in the
                        string:
                                %%      <a href="insert.txt.html#insert" class="d">insert</a> <a href="insert.txt.html#a" class="d">a</a> single '%' character
                                %d      <a href="insert.txt.html#insert" class="d">insert</a> the date from above
                                %u      <a href="insert.txt.html#insert" class="d">insert</a> the user from above
                                %p      <a href="insert.txt.html#insert" class="d">insert</a> result of b:changelog_entry_prefix
                                %c      where to position cursor when done
                        The default <a href="motion.txt.html#is" class="d">is</a> "%d  %u\n\n\t* %p%c\n\n"<a href="motion.txt.html#%2C" class="d">,</a> which produces
                        something like <a href="motion.txt.html#%28" class="d">(</a>| <a href="motion.txt.html#is" class="d">is</a> where cursor will be, unless <a href="motion.txt.html#at" class="d">at</a>
                        the start of the line where <a href="motion.txt.html#it" class="d">it</a> denotes the beginning
                        of the line) 
<span class="e">                                |2003-01-14  Full Name  &lt;user@host&gt;</span>
<span class="e">                                |</span>
<span class="e">                                |        * prefix|</span>

g:changelog_new_entry_format
                        The format used when creating <a href="insert.txt.html#a" class="d">a</a> new entry.
                        The following table describes special tokens in the
                        string:
                                %p      <a href="insert.txt.html#insert" class="d">insert</a> result of b:changelog_entry_prefix
                                %c      where to position cursor when done
                        The default <a href="motion.txt.html#is" class="d">is</a> "\t*%c"<a href="motion.txt.html#%2C" class="d">,</a> which produces something
                        similar to 
<span class="e">                                |        * prefix|</span>

g:changelog_date_entry_search
                        The search <a href="pattern.txt.html#pattern" class="d">pattern</a> to use when searching for <a href="insert.txt.html#a" class="d">a</a>
                        date-entry.
                        The same tokens that can be used for
                        g:changelog_new_date_format can be used here <a href="motion.txt.html#as" class="d">as</a> well.
                        The default <a href="motion.txt.html#is" class="d">is</a> '^\s*%d\_s*%u' which finds lines
                        matching the form 
<span class="e">                                |2003-01-14  Full Name  &lt;user@host&gt;</span>
                       and some similar formats.

g:changelog_date_end_entry_search
                        The search <a href="pattern.txt.html#pattern" class="d">pattern</a> to use when searching for the <a href="intro.txt.html#end" class="d">end</a>
                        of <a href="insert.txt.html#a" class="d">a</a> date-entry.
                        The same tokens that can be used for
                        g:changelog_new_date_format can be used here <a href="motion.txt.html#as" class="d">as</a> well.
                        The default <a href="motion.txt.html#is" class="d">is</a> '^\s*$' which finds lines that contain
                        only <a href="pattern.txt.html#whitespace" class="d">whitespace</a> or are completely empty.

<a href="filetype.txt.html#b%3Achangelog_name" class="d">b:changelog_name</a>                                        <a name="b%3Achangelog_name" class="t">b:changelog_name</a>
                        Name of the ChangeLog file to look for.
                        The default <a href="motion.txt.html#is" class="d">is</a> 'ChangeLog'.

b:changelog_path
                        Path of the ChangeLog to use for the current buffer.
                        The default <a href="motion.txt.html#is" class="d">is</a> empty, thus looking for <a href="insert.txt.html#a" class="d">a</a> file named
                        <a href="filetype.txt.html#b%3Achangelog_name" class="l">b:changelog_name</a> in the same directory <a href="motion.txt.html#as" class="d">as</a> the
                        current buffer.  If not found, the parent directory of
                        the current buffer <a href="motion.txt.html#is" class="d">is</a> searched.  This continues
                        recursively until <a href="insert.txt.html#a" class="d">a</a> file <a href="motion.txt.html#is" class="d">is</a> found or there are no more
                        parent directories to search.

b:changelog_entry_prefix
                        Name of <a href="insert.txt.html#a" class="d">a</a> function to call to generate <a href="insert.txt.html#a" class="d">a</a> prefix to <a href="insert.txt.html#a" class="d">a</a>
                        new entry.  This function takes no arguments and
                        should return <a href="insert.txt.html#a" class="d">a</a> <a href="eval.txt.html#string" class="d">string</a> containing the prefix.
                        Returning an empty prefix <a href="motion.txt.html#is" class="d">is</a> fine.
                        The default generates the shortest path between the
                        ChangeLog's pathname and the current <a href="windows.txt.html#buffers" class="d">buffers</a> pathname.
                        In the future, <a href="motion.txt.html#it" class="d">it</a> will also be possible to use other
                        variable contexts for this variable, for example, g:.

The Changelog entries are inserted where they add the least amount of text.
After figuring out the current date and user, the file <a href="motion.txt.html#is" class="d">is</a> searched for an
entry beginning with the current date and user and if found adds another item
under it.  If not found, <a href="insert.txt.html#a" class="d">a</a> new entry and item <a href="motion.txt.html#is" class="d">is</a> prepended to the beginning of
the Changelog.


<span class="c">FORTRAN                                                </span> <a name="ft-fortran-plugin" class="t">ft-fortran-plugin</a>

Options:
<a href="options.txt.html#%27expandtab%27" class="o">'expandtab'</a>     <a href="motion.txt.html#is" class="d">is</a> switched on to avoid tabs <a href="motion.txt.html#as" class="d">as</a> required by the Fortran
                standards unless the user has set fortran_have_tabs in .vimrc.
<a href="options.txt.html#%27textwidth%27" class="o">'textwidth'</a>     <a href="motion.txt.html#is" class="d">is</a> set to 72 for fixed source format <a href="motion.txt.html#as" class="d">as</a> required by the
                Fortran standards and to 80 for free source format.
<a href="options.txt.html#%27formatoptions%27" class="o">'formatoptions'</a> <a href="motion.txt.html#is" class="d">is</a> set to break code and comment lines and to preserve long
                lines.  You can format comments with <a href="change.txt.html#gq" class="l">gq</a><a href="repeat.txt.html#." class="d">.</a>
For further discussion of fortran_have_tabs and the method used for the
detection of source format see <a href="syntax.txt.html#ft-fortran-syntax" class="l">ft-fortran-syntax</a><a href="repeat.txt.html#." class="d">.</a>


<span class="c">GIT COMMIT                                             </span> <a name="ft-gitcommit-plugin" class="t">ft-gitcommit-plugin</a>

One command, :DiffGitCached, <a href="motion.txt.html#is" class="d">is</a> provided to show <a href="insert.txt.html#a" class="d">a</a> <a href="diff.txt.html#diff" class="d">diff</a> of the current commit
in the preview window.  It <a href="motion.txt.html#is" class="d">is</a> equivalent to calling "git <a href="diff.txt.html#diff" class="d">diff</a> --cached" plus
any arguments given to the command.


<span class="c">MAIL                                                   </span> <a name="ft-mail-plugin" class="t">ft-mail-plugin</a>

Options:
<a href="options.txt.html#%27modeline%27" class="o">'modeline'</a>      <a href="motion.txt.html#is" class="d">is</a> switched off to avoid the danger of trojan horses, and to
                avoid that <a href="insert.txt.html#a" class="d">a</a> Subject line with "Vim:" in <a href="motion.txt.html#it" class="d">it</a> will cause an
                error message.
<a href="options.txt.html#%27textwidth%27" class="o">'textwidth'</a>     <a href="motion.txt.html#is" class="d">is</a> set to 72.  This <a href="motion.txt.html#is" class="d">is</a> often recommended for e-mail.
<a href="options.txt.html#%27formatoptions%27" class="o">'formatoptions'</a>  <a href="motion.txt.html#is" class="d">is</a> set to break text lines and to repeat the comment leader
                in new lines, so that <a href="insert.txt.html#a" class="d">a</a> leading "<a href="change.txt.html#%3E" class="d">&gt;</a>" for <a href="quotes.txt.html#quotes" class="d">quotes</a> <a href="motion.txt.html#is" class="d">is</a> repeated.
                You can also format quoted text with <a href="change.txt.html#gq" class="l">gq</a><a href="repeat.txt.html#." class="d">.</a>

Local mappings:
<a href="map.txt.html#%3CLocalLeader%3E" class="s">&lt;LocalLeader&gt;</a>q   or   \\MailQuote
        Quotes the text selected in <a href="visual.txt.html#Visual" class="d">Visual</a> mode, or from the cursor position
        to the <a href="intro.txt.html#end" class="d">end</a> of the file in <a href="intro.txt.html#Normal" class="d">Normal</a> mode.  This means "<a href="change.txt.html#%3E" class="d">&gt;</a> " <a href="motion.txt.html#is" class="d">is</a> inserted in
        each line.

<span class="c">MAN                                                    </span> <a name="ft-man-plugin" class="t">ft-man-plugin</a> <a name="%3AMan" class="t">:Man</a>

Displays <a href="insert.txt.html#a" class="d">a</a> manual page in <a href="insert.txt.html#a" class="d">a</a> <a href="todo.txt.html#nice" class="d">nice</a> way.  Also see the user manual
<a href="usr_12.txt.html#find-manpage" class="l">find-manpage</a><a href="repeat.txt.html#." class="d">.</a>

To start using the "<a href="filetype.txt.html#%3AMan" class="d">:Man</a>" command before any manual page was loaded, source
this <a href="usr_41.txt.html#script" class="d">script</a> from your <a href="starting.txt.html#startup" class="d">startup</a> <a href="starting.txt.html#vimrc" class="d">vimrc</a> file: 
<span class="e"></span>
<span class="e">        runtime ftplugin/man.vim</span>
<span class="e"></span>
Options:
<a href="options.txt.html#%27iskeyword%27" class="o">'iskeyword'</a>     the '.' character <a href="motion.txt.html#is" class="d">is</a> added to be able to use <a href="tagsrch.txt.html#CTRL-%5D" class="k">CTRL-]</a> on the
                manual page name.

Commands:
Man <span class="s">{name}</span>      Display the manual page for <span class="s">{name}</span> in <a href="insert.txt.html#a" class="d">a</a> window.
Man <span class="s">{number}</span> <span class="s">{name}</span>
                Display the manual page for <span class="s">{name}</span> in <a href="insert.txt.html#a" class="d">a</a> <a href="motion.txt.html#section" class="d">section</a> <span class="s">{number}</span>.

Global mapping:
<a href="map.txt.html#%3CLeader%3E" class="s">&lt;Leader&gt;</a>K       Displays the manual page for the <a href="motion.txt.html#word" class="d">word</a> under the cursor.

Local mappings:
<a href="tagsrch.txt.html#CTRL-%5D" class="k">CTRL-]</a>          Jump to the manual page for the <a href="motion.txt.html#word" class="d">word</a> under the cursor.
<a href="tagsrch.txt.html#CTRL-T" class="k">CTRL-T</a>          Jump back to the previous manual page.


<span class="c">PDF                                                    </span> <a name="ft-pdf-plugin" class="t">ft-pdf-plugin</a>

Two maps, <span class="s">&lt;C-]&gt;</span> and <span class="s">&lt;C-T&gt;</span>, are provided to simulate <a href="insert.txt.html#a" class="d">a</a> <a href="tagsrch.txt.html#tag" class="d">tag</a> stack for navigating
the PDF.  The following are treated <a href="motion.txt.html#as" class="d">as</a> tags:

<a href="motion.txt.html#-" class="d">-</a> The byte offset after "startxref" to the xref table
<a href="motion.txt.html#-" class="d">-</a> The byte offset after the /Prev key in the trailer to an earlier xref table
<a href="motion.txt.html#-" class="d">-</a> <a href="insert.txt.html#A" class="d">A</a> line of the form "0123456789 00000 <a href="pattern.txt.html#n" class="d">n</a>" in the xref table
<a href="motion.txt.html#-" class="d">-</a> An object <a href="intro.txt.html#reference" class="d">reference</a> like "1 <a href="motion.txt.html#0" class="d">0</a> <a href="change.txt.html#R" class="d">R</a>" anywhere in the PDF

These maps can be disabled with 
<span class="e">        :let g:no_pdf_maps = 1</span>


<span class="c">RPM SPEC                                               </span> <a name="ft-spec-plugin" class="t">ft-spec-plugin</a>

Since the text for this <a href="usr_05.txt.html#plugin" class="d">plugin</a> <a href="motion.txt.html#is" class="d">is</a> rather long <a href="motion.txt.html#it" class="d">it</a> has been <a href="change.txt.html#put" class="d">put</a> in <a href="insert.txt.html#a" class="d">a</a> separate
file: <a href="pi_spec.txt.html#pi_spec.txt" class="l">pi_spec.txt</a><a href="repeat.txt.html#." class="d">.</a>


<span class="c">SQL                                                    </span> <a name="ft-sql" class="t">ft-sql</a>

Since the text for this <a href="usr_05.txt.html#plugin" class="d">plugin</a> <a href="motion.txt.html#is" class="d">is</a> rather long <a href="motion.txt.html#it" class="d">it</a> has been <a href="change.txt.html#put" class="d">put</a> in <a href="insert.txt.html#a" class="d">a</a> separate
file: <a href="ft_sql.txt.html#ft_sql.txt" class="l">ft_sql.txt</a><a href="repeat.txt.html#." class="d">.</a>


<span class="c">TEX                                            </span> <a name="ft-tex-plugin" class="t">ft-tex-plugin</a> <a name="g%3Atex_flavor" class="t">g:tex_flavor</a>

If the first line of <a href="insert.txt.html#a" class="d">a</a> *.tex file has the form 
<span class="e">        %&amp;&lt;format&gt;</span>
then this determined the file type:  plaintex (for plain TeX), context (for
ConTeXt), or tex (for LaTeX).  Otherwise, the file <a href="motion.txt.html#is" class="d">is</a> searched for keywords to
choose context or tex.  If no keywords are found, <a href="motion.txt.html#it" class="d">it</a> defaults to plaintex.
You can change the default by defining the variable <a href="filetype.txt.html#g%3Atex_flavor" class="d">g:tex_flavor</a> to the format
(not the file type) you use most.  Use one of these: 
<span class="e">        let g:tex_flavor = "plain"</span>
<span class="e">        let g:tex_flavor = "context"</span>
<span class="e">        let g:tex_flavor = "latex"</span>
Currently no other formats are recognized.


 vim:tw=78:ts=8:ft=help:norl:

</pre><p>
Quick links:
<a href="/">help overview</a> &middot;
<a href="quickref.txt.html">quick reference</a> &middot;
<a href="usr_toc.txt.html">user manual toc</a> &middot;
<a href="help.txt.html#reference_toc">reference manual toc</a> &middot;
<a href="vim_faq.txt.html">faq</a>
</p>
<p id="footer">This site is maintained by Carlo Teubner (<i>(my first name) dot (my last name) at gmail dot com</i>).</p>
</div>
</div>
</body>
</html>
